function [Y,Xf,Af] = net20230321(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 21-Mar-2023 10:56:52.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1;-3.20903604995314e-05];
x1_step1.gain = [0.005;31162.0057996731];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.7726087742518568113;-2.4622983738808770227;2.3217433911521592194;0.093387957846126315453;-0.59505381086111452937;0.097802169630811161549;-2.4738517046079664397;2.6105646894376275391;-4.1704521672163590296;4.4754089197388218224];
IW1_1 = [2.1454655559164259593 -2.0226094529739082617;1.3102242504183043703 4.8010287436757197455;-4.4742272150049817725 1.0930782064230848416;3.116207892107551114 -3.4827989233511083;3.652371384552048017 -2.6721951654026612211;-1.4871263350775718592 -2.4955734539698783969;-2.0966587162947440959 -3.8597888331977738829;3.4460687535145821947 1.9110296756826832265;-2.4186548668576199894 -3.7810033027989402576;1.7734799454909817573 3.9951115615851602314];

% Layer 2
b2 = -0.66759925322365065714;
LW2_1 = [0.019488330281183786213 -0.011024256500092644018 -0.0080650070243353366023 -0.0018037782807113734388 0.0031389272637544979663 0.47366822116798601439 0.33933694282757947969 0.52315678336781090696 0.011007649118765184745 0.46768574574866988991];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 8.42764853419414e-05;
y1_step1.xoffset = -11865.7060263325;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
